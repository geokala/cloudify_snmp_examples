#! /usr/bin/env python
import os
import subprocess
import tempfile

TELEGRAF_CONF_PATH = '/etc/telegraf/telegraf.d'


def log(message, level='info'):
    subprocess.check_call([
        'ctx', 'logger', level, message,
    ])


def abort_on_unhealthy_service(fail_message, service='telegraf'):
    log('Confirming {service} is healthy'.format(service=service))
    try:
        subprocess.check_call(['sudo', 'service', service, 'status'])
    except subprocess.CalledProcessError:
        subprocess.check_call(['ctx', 'abort_operation', fail_message])


def remove_telegraf_configuration(name):
    # Let's fail early rather than making changes THEN saying something is
    # broken and hoping the user is lucky enough to figure out that it was
    # already broken before the workflow started.
    abort_on_unhealthy_service(
        fail_message='Telegraf was not running before configuration change.',
    )

    conf_temp = tempfile.mkdtemp()
    log('Removing telegraf configuration for {name}'.format(name=name))
    conf_path = os.path.join(TELEGRAF_CONF_PATH, name + '.conf')
    subprocess.check_call(['sudo', 'mv', conf_path, conf_temp])

    log('Reloading telegraf to use updated configuration')
    subprocess.check_call(['sudo', 'service', 'telegraf', 'reload'])

    abort_on_unhealthy_service(
        fail_message=(
            'Telegraf service failed to use updated configuration. '
            'Configuration removed from {orig} is in {temp}. '
            'Please investigate and repair telegraf.'.format(
                orig=conf_path,
                temp=conf_temp,
            )
        ),
    )

    log('Cleaning up')
    subprocess.check_call(['sudo', 'rm', '-rf', conf_temp])

    log('Telegraf configuration updated, {name} removed'.format(name=name))


if __name__ == '__main__':
    remove_telegraf_configuration(os.environ['name'])
