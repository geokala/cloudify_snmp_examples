#! /usr/bin/env python
import os
import subprocess
import tempfile

TELEGRAF_CONF_PATH = '/etc/telegraf/telegraf.d'


def log(message, level='info'):
    subprocess.check_call([
        'ctx', 'logger', level, message,
    ])


def abort_on_unhealthy_service(fail_message, service='telegraf'):
    log('Confirming {service} is healthy'.format(service=service))
    try:
        subprocess.check_call(['sudo', 'service', service, 'status'])
    except subprocess.CalledProcessError:
        subprocess.check_call(['ctx', 'abort_operation', fail_message])


def add_telegraf_configuration(name, configuration):
    abort_on_unhealthy_service(
        fail_message='Telegraf was not running before configuration change.',
    )

    conf_temp_dir = tempfile.mkdtemp()
    conf_temp_file = os.path.join(conf_temp_dir, name + '.conf')
    conf_destination = os.path.join(TELEGRAF_CONF_PATH, name + '.conf')
    log('Generating telegraf configuration for {name}'.format(name=name))
    with open(conf_temp_file, 'w') as conf_handle:
        conf_handle.write(configuration)

    log('Applying configuration')
    subprocess.check_call(['sudo', 'chown', 'telegraf.', conf_temp_file])
    subprocess.check_call(['sudo', 'chmod', '640', conf_temp_file])
    subprocess.check_call(['sudo', 'mv', conf_temp_file, conf_destination])
    subprocess.check_call(['sudo', 'rm', '-rf', conf_temp_dir])

    log('Reloading telegraf to use updated configuration')
    subprocess.check_call(['sudo', 'service', 'telegraf', 'reload'])

    abort_on_unhealthy_service(
        fail_message=(
            'Telegraf service failed to use updated configuration. '
            'New configuration is in {conf}. '
            'Please investigate and repair telegraf.'.format(
                conf=conf_destination,
            )
        ),
    )

    log('Telegraf configuration updated, {name} added'.format(name=name))


if __name__ == '__main__':
    add_telegraf_configuration(
        name=os.environ['name'],
        configuration=os.environ['configuration'],
    )
